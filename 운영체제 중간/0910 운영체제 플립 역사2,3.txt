0910 운영체제 플립 os역사2,3

non OS system 개선후: 1세대 OS
-batch processing(일괄처리) 시작
-준비시간 단축(cpu의 유휴시간 _idle time)
-비슷한 요구조건을 갖는 여러 작업을 묶어 한번에 처리

2세대 OS
-속도가 느린 카드reader를 tape로 대체
-'버퍼'개념 등장 (cpu요청이 아직 안와도 미리 읽어놓음)
-'디스크'개념 등장spooling (버퍼 역할)(미리 읽어놨다가 cpu로 _입력, 미리 받아놨다가 print로 _출력)
-'다중프로그래밍'multi programming(디스크에 여러 작업을 동시에 load할 수 있음)
=> 한 작업이 끝나도 idle타임동안 놀지 말고 바로 다른 작업 시작가능
-Time-Sharing(시분할)(하나의 cpu를 여러 사용자가 사용) (cpu실행시간을 나눠서 분배하여 번갈아 사용)
-Real-Time(실시간처리) (마감시간이 존재하는 작업들)
ex) 비행기가 고장난후 추락하기 전까지 solution제공해야한다던가

3세대 OS
-다중모드(하나의 컴퓨터로 batch,time-sharing,real-time 다 수행)


정리
non OS system : 일일이 카드를 손으로 load시켜야 하니 cpu가 그동안 놂(준비시간이 긺 _idle time)
1세대 OS : 준비할때(card적재,분리,실행버튼) 비슷한 작업들을 묶어서(batch) 한번에 실행
2세대 OS : 그래도 입출력시간이 느려서 여전히 idle time 문제 -> tape, 버퍼, 디스크 도입
-> multi programming
3세대 OS : 다중모드, 하드웨어 가격이 비싸므로 하나의 기계로 여러 모든 기능 수행
+ 4세대 OS : 하드웨어 발전(소형화,저렴화,고성능화) -> 사용자증가 -> net-work 필요성
+ 현재 OS : 가상 머신, 임베디드 시스템, 클라우드 컴퓨팅, 모바일 기기 os, IOT


OS의 분류
동시 사용자 수에 따라
- Single-user system
- Multi-user system	//현재 대부분 Multi-user

작업 처리 방법에 따라
- Single-tasking system
- Multi-tasking system	//현재 대부분 Multi-tasking

사용환경에 따라
Batch system
사용자 요청 작업을 모아놨다가 한번에 처리

Time-sharing system
cpu time을 조금씩 분할하여 각 사용자에게 나눠주는 방식
-응답시간 감소

병렬처리 시스템 환경 
- cpu가 여러개 존재(Multi-processor)
- 처리율, 신뢰성 향상
- 강결합시스템(cpu들이 메모리 공유) (_Tightly Coupled)

분산 시스템 
- 별도의 컴퓨터가 net-work로 연결됨 (분리된 기기가 하나의 os처럼)
- 투명성(transparency) : 분산 시스템 이해안해도 그냥 내 컴퓨터 하나만 있는 것처럼 사용가능,
자원의 위치나 정보가 변경되어도 사용자가 이를 인식하지 못하고 계속 사용 가능
*투명성 종류: 위치 투명성, 이주", 복제", 병행", 접근", 고장", 성능", 규모"
- 약결합시스템(메모리 공유x) (_LooselyCoupled)





문제
Q. 운영체제의 운용 기법 종류 중 다음 설명에 가장 부합하는 것
CPU의 시간을 각 사용자에게 균등하게 분할하여 사용하는 시스템으로
모든 컴퓨터 사용자에게 똑같은 서비스를 하는것을 목표로 하고 있다.
CPU의 전에 사용 시간을 작은 작업 시간량으로 나누어서 그 시간 동안만
번갈아서 CPU를 할당하여 각 작업을 처리한다.
1. Batch Processing System
2. Multi Programming System
3. Time Sharing System
4. Real Time System

A. 3. Time Sharing System

Q. 초기에 운영체제가 없던 시절에는 프로세서의 낭비가 극심했다.
다음과 같은 개념이 처음 도입됐을 때, 프로세서의 낭비와 비효율성을
어떤 방식으로 줄이게 되는지 쓰시오.
1) 일괄처리(batch processing)
2) 버퍼링(buffering)
3) 다중 프로그래밍(multiprogramming)

A. 1) 비슷한 요구조건을 갖는 작업을 묶어서 처리
2) 버퍼에 미리 읽어놓아 cpu가 처리중인 작업이 끝나면 바로 처리할 수 있게 하여 입출력시간이 줄어듦
3) 디스크에 여러 작업을 동시에 로드하여 입출력대기등 cpu가 기다리는 시간에 다른 프로그램을 실행하게 하여 효율성을 높임

[이런 이해와 관련된 문제 출제 선호]

질문
-2주차퀴즈 7번, 일괄처리 환경과 비교할때 시분할 시스템이 갖는 장점이 왜 응답시간 감소?
시분할은 쟤 다 끝나고 나가아니라 중간중간 번갈아서 하므로 내가 먼저 끝날수도 있음
일괄처리(배치시스템)은 묶여있는 작업이 다 끝나야 반환하는데 시분할은 중간에 내것만 따로 처리될수도 있으므로
다음문제도 마찬가지

-2주차퀴즈 8번, 시분할시스템에 비해 배치 시스템에 더 가까운 설명
: 사용자가 결과를 받는 반환시간이 길다, 사용자보다는 시스템성능위주로 구현한다.










