0919 운영체제 
OS기능

*커널
부팅후 메모리에 상주하는부분(메모리에 os를 모두 올려놓지않고 핵심부분만 상주시킴)
*유틸리티 프로그램
커널외에 상주하지 않는 나머지 부분
-> os 구조: 하드웨어 -> 커널 -> system call -> 유틸리티 -> applications

커널의 주 기능
1. 자원 관리-하드웨어자원(메모리등) & 소프트웨어자원(file등)
2. 입출력 관리 - 커널안의 buffer를 이용함(프로그램과 입출력장치 사이에서 buffer를 거침)

부팅: os가 메모리에 자기자신을 적재하는 과정(모든프로그램은 메모리에서 실행됨)
 
Load: 커널을 메모리에 적재하는 행위
Loader: Load하는 프로그램
bootstrap loader :Loader를 적재하는 논리회로(메모리에 올릴 필요 없음)(ROM에 구워서 구현)


시스템 콜
- os기능 호출(이용)
- 고급 언어(C or C++)
- 직접 이용하지 않고 application program interface(API)를 이용해서 사용
(사용자가 자세한 구현방법 알필요 없이 이용가능하게 하기 위해)
- 대표적 API: Windows, Linux



Q. UNIX 시스템에서 사용자와 운영체제 서비스를 연결해주는 인터페이스로 상위수준의 소프트웨어가 커널의 기능을 이용할 수 있도록 지원해주는 것은?
1. 시스템 호출
2 하드웨어 제어 루틴
3. 프로세스 제어 서브 시스템
4. 파일 서브 시스템

A. 1. 시스템 호출





프로세스정의와 상태전이
프로세스: 커널에서 실행중인 프로그램을 관리하는 객체
(*한글이라는 프로그램이 있고, 이를 실행하면 프로세스가 생김)(실행된것)
(프로세서는 하드웨어, 프로세스는 메모리에 적재되어 실행중인 프로그램)

PCB(프로세스 관리블록) :
- Process Control Block
- 커널에 프로세스에 대한 정보를 저장하는 자료구조(각종 자원 요구,할당,반납)
- 저장정보: 고유번호(id), 우선순위, 현재상태..
- 프로세스 개당 1개의 pcb 필요


프로세스 상태(프로세스의 일생)
생성상태 new: 처음 생성되는 상태
- pcb 할당, id도 생성...
- 기억장치 공간을 검사해서 충분하면 준비상태 또는 지연준비상태로 전이

running: 실행상태(cpu에서 코드를 실행중인 상태)

ready: 준비되어있는 상태
- cpu가 작업해주기를 기다리는 상태
- 실행가능하지만 cpu가 하나므로 번갈아 사용하기위해 차례를 기다리는것
- 비자발적으로 멈춤

waiting(blocked): 입출력을 만났을때 받기 위해 멈춘 상태 
- 이벤트가 발생해야 실행/작업이 가능하므로 그때까지 기다리는 것
- 자발적으로 멈춤 cpu반납

terminated: 종료
- 메모리도 반납해주고, 마무리해주고..
- pcb만 남아있음(pcb도 사라지면 종료된 상태가 아니라 아예 없는것)

-> 
활동상태 active(메모리에 기억장치할당된 상태)
: running, ready, waiting

지연 상태 suspended
- 기억장치를 잃은 상태
- 프로세스/기억장치의 양이 많아져 느려졌을때 우선순위가 낮은건 잠깐 디스크로 내보냄
: suspended ready(ready상태에서 기억장치를 잃은 경우), suspended block(block상태에서 " 잃은 경우)

*프로세스상태가 서로 변화되는 과정
created -> ready <-> running <-> blocked -> terminated

*시분할: 한 프로세스 작업후 ready상태로 보내고 다음 프로세스 작업 반복(3주차 2 10분)

*선점 preemption
: 시간할당량을 다 쓰거나 더 우선순위가 높은 프로세스가 들어옴으로 인해
준비상태로 강제로 돌아가야하는 경우(cpu를 뺏기는 경우)(비자발적), 준비상태로 전이됨

*running중 다음실행시킬 ready중인 프로그램 고르는게 scheduling

*실행중인 프로그램이 프로세스

[3주차 동영상 프로세스 상태전이도 외워서 그리기] 
[suspended가 언제 발생하는지 구체적으로 설명_시스템과부하등...]











s